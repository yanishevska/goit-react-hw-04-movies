{"version":3,"sources":["views/MoviesPage/MoviesPage.module.css","views/MoviesPage/MoviesPage.js","services/MovieAPI.js"],"names":["module","exports","MovieList","lazy","MovieDetailsPage","MoviesPage","useState","query","setQuery","movies","setMovies","history","useHistory","location","useLocation","path","useRouteMatch","handleNameChange","e","inputQuery","target","value","handleSubmit","preventDefault","trim","toast","info","push","search","useEffect","movie","queryString","parse","API","fetchSearchMovies","then","resp","fallback","component","exact","render","className","s","SearchMovie","SearchForm","onSubmit","type","SearchFormButton","onChange","SearchFormInput","autoComplete","autoFocus","placeholder","API_KEY","axios","defaults","baseURL","fetchTrendsMovies","a","get","results","data","console","log","fetchDetailsMovies","movieId","response","message","fetchCastMovies","cast","fetchReviewsMovies"],"mappings":"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","file":"static/js/MoviesPage.45dccb19.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchMovie\":\"MoviesPage_SearchMovie__2Cv8U\",\"SearchForm\":\"MoviesPage_SearchForm__2rMMm\",\"SearchFormButton\":\"MoviesPage_SearchFormButton__3Zg-y\",\"SearchFormButtonLabel\":\"MoviesPage_SearchFormButtonLabel__3c1LY\",\"SearchFormInput\":\"MoviesPage_SearchFormInput__axKXw\"};","import {useEffect, useState,lazy,Suspense } from \"react\";\r\nimport { Route, Switch, useRouteMatch, useHistory, useLocation, } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport s from './MoviesPage.module.css';\r\nimport { toast } from \"react-toastify\";\r\nimport API from \"../../services/MovieAPI\";\r\nimport Loader from \"react-loader-spinner\";\r\nconst  MovieList = lazy(() => import( '../../components/MovieList'),);\r\nconst MovieDetailsPage = lazy(()=>import('../MovieDetailsPage/'),);\r\n\r\n\r\nfunction MoviesPage () {\r\n    const [query, setQuery] = useState('');\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const { path } = useRouteMatch();\r\n\r\n    const handleNameChange = e => {\r\n        const inputQuery = e.target.value;\r\n        setQuery(inputQuery);\r\n     \r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (query.trim() === '') {\r\n            return toast.info(\"Input name movie!\");\r\n           \r\n        }\r\n      \r\n    history.push({ ...location, search: `?query=${query}` });\r\n        setQuery('');\r\n      \r\n    };\r\n   \r\n    useEffect(() => {\r\n        const movie = queryString.parse(location.search).query;\r\n       \r\n        if (!movie) {\r\n            setMovies([]);\r\n        }\r\n\r\n        if (movie) {\r\n            API.fetchSearchMovies(movie).then(resp => setMovies(resp));\r\n            setQuery('');\r\n            \r\n        }\r\n    }, [location.search]);\r\n    \r\n\r\n    return (\r\n            <Suspense fallback={<Loader/>}>\r\n                  <Switch>\r\n                     <Route path={`${path}/:movieId`} component={MovieDetailsPage} />\r\n                    <Route exact path=\"/movies\"\r\n                        render={() => (\r\n                            <>\r\n                                  <header className={s.SearchMovie}>\r\n                                  <form className={s.SearchForm} onSubmit={handleSubmit}>\r\n                                        <button type=\"submit\" className={s.SearchFormButton}>\r\n                                            Search\r\n                                     </button>\r\n    \r\n                    <input\r\n                        value={query}\r\n                        onChange={handleNameChange}\r\n                        className={s.SearchFormInput}\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        autoFocus\r\n                        placeholder=\"Search movie\"\r\n                    />\r\n                </form>\r\n                   </header>\r\n                  <>          \r\n                        <MovieList movies={movies}/>\r\n                </>\r\n                </>\r\n                    )}\r\n             / >\r\n      </Switch>\r\n         </Suspense>\r\n        )\r\n}\r\n\r\nexport default MoviesPage;\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = 'ea6ff4a2a64bb12db1e0ce6f81b745f4';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\naxios.defaults.baseURL = BASE_URL;\r\n\r\n\r\n const fetchTrendsMovies = async () => {\r\n  try {\r\n    const {\r\n      data: { results },\r\n    } = await axios.get(\r\n      `/trending/movie/day?api_key=${API_KEY}`);\r\n    return results;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n  \r\n};\r\n\r\n\r\nconst fetchSearchMovies = async query => {\r\n  try {\r\n    const {\r\n      data: { results },\r\n    } = await axios.get(\r\n      `search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`);\r\n    return results;\r\n  } catch (error) {\r\n    console.log(error);\r\n  };\r\n};\r\n\r\nconst fetchDetailsMovies = async movieId => {\r\n  try {\r\n    const response = await axios.get(\r\n      `/movie/${movieId}?api_key=${API_KEY}&language=en-US`,\r\n    );\r\n    console.log(response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nconst fetchCastMovies = async movieId => {\r\n  try {\r\n    const results = await axios.get(\r\n      `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\r\n    return results.data.cast;\r\n  } catch (error) {\r\n    console.log(error);\r\n  } \r\n};\r\nconst fetchReviewsMovies = async (movieId) => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\r\n   console.log(data.results);\r\n    return data.results;\r\n  } catch (error) {\r\n    console.log(error);\r\n  } \r\n};\r\n\r\n\r\nconst API = {\r\n  fetchSearchMovies,\r\n  fetchTrendsMovies,\r\n  fetchDetailsMovies,\r\n  fetchCastMovies,\r\n  fetchReviewsMovies,\r\n};\r\nexport default API;\r\n\r\n"],"sourceRoot":""}